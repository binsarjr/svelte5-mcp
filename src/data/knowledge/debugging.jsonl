{"question":"How do you handle Promises in Svelte templates?","answer":"Svelte provides `{#await ...}` blocks to handle Promises and branch based on their three possible states: pending, fulfilled, or rejected. [cite: 253]\n\nFull example with all states:\n```svelte\n{#await promise}\n\t\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t\n\t<p>The value is {value}</p>\n{:catch error}\n\t\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\nIf the provided expression is not a `Promise`, only the `:then` branch will be rendered, including during server-side rendering. [cite: 254]\n\n**Omitting `catch` block**: The `catch` block can be omitted if there's no need to render anything when the promise rejects. [cite: 255]\n```svelte\n{#await promise}\n\t\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t\n\t<p>The value is {value}</p>\n{/await}\n```\n\n**Omitting initial block**: If you don't care about the pending state, the initial block can be omitted. [cite: 256]\n```svelte\n{#await promise then value}\n\t<p>The value is {value}</p>\n{/await}\n```\n\n**Showing only error state**: Similarly, if only the error state is relevant, the `then` block can be omitted. [cite: 257]\n```svelte\n{#await promise catch error}\n\t<p>The error is {error}</p>\n{/await}\n```"}