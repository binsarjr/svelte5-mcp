{"instruction":"Create a Svelte 5 component demonstrating .svelte files: CSS inside a block will be scoped to that component.","input":"CSS inside a block will be scoped to that component.","output":"<style>\np {\n  /* this will only affect <p> elements in this component */\n  color: burlywood;\n}\n</style>"}
{"instruction":"Create a Svelte 5 component demonstrating $props: On the other side, inside we can receive props with the rune...","input":"On the other side, inside we can receive props with the rune...","output":"<!file: MyComponent.svelte>\n<script>\nlet props = $props();\n</script>\n\n<p>this component is {props.adjective}</p>"}
{"instruction":"Create a Svelte 5 component demonstrating $props: ...though more commonly, you'll your props:","input":"...though more commonly, you'll your props:","output":"<!file: MyComponent.svelte>\n<script>\nlet{ adjective }= $props();\n</script>\n\n<p>this component is {adjective}</p>"}
{"instruction":"Create a Svelte 5 component demonstrating $props: You can add type safety to your components by annotating your props, as you would with any other variable declaration.","input":"You can add type safety to your components by annotating your props, as you would with any other variable declaration. In TypeScript that might look like this...","output":"<script lang=\"ts\">\nlet { adjective }: { adjective: string } = $props();\n</script>"}
{"instruction":"Create a Svelte 5 component demonstrating $props: ...while in JSDoc you can do this:","input":"...while in JSDoc you can do this:","output":"<script>\n/** @type {{ adjective: string }} */\nlet { adjective } = $props();\n</script>"}
{"instruction":"Create a Svelte 5 component demonstrating $props: You can, of course, separate the type declaration from the annotation:","input":"You can, of course, separate the type declaration from the annotation:","output":"<script lang=\"ts\">\ninterface Props {\n  adjective: string;\n}\n\nlet { adjective }: Props = $props();\n</script>"}
{"instruction":"Create a Svelte 5 component demonstrating $props.id(): This rune, added in version 5.20.0, generates an ID that is unique to the current component instance.","input":"This rune, added in version 5.20.0, generates an ID that is unique to the current component instance. When hydrating a server-rendered component, the value will be consistent between server and client. This is useful for linking elements via attributes like and .","output":"<script>\nconst uid = $props.id();\n</script>\n\n<form>\n  <label for=\"{uid}-firstname\">First Name: </label>\n  <input id=\"{uid}-firstname\" type=\"text\" />\n\n  <label for=\"{uid}-lastname\">Last Name: </label>\n  <input id=\"{uid}-lastname\" type=\"text\" />\n</form>"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: By default, attributes work exactly like their HTML counterparts.","input":"By default, attributes work exactly like their HTML counterparts.","output":"<div class=\"foo\">\n  <button disabled>can't touch this</button>\n</div>"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: As in HTML, values may be unquoted.","input":"As in HTML, values may be unquoted.","output":"<input type=checkbox />"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: Attribute values can contain JavaScript expressions.","input":"Attribute values can contain JavaScript expressions.","output":"<a href=\"page/{p}\">page {p}</a>"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: Or they can JavaScript expressions.","input":"Or they can JavaScript expressions.","output":"<button disabled={!clickable}>...</button>"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: Boolean attributes are included on the element if their value is and excluded if it's .","input":"Boolean attributes are included on the element if their value is and excluded if it's . All other attributes are included unless their value is ( or ).","output":"<input required={false} placeholder=\"This input field is not required\" />\n<div title={null}>This div has no title attribute</div>"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: When the attribute name and value match ( ) they can be replaced with .","input":"When the attribute name and value match ( ) they can be replaced with .","output":"<button {disabled}>...</button>"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: By convention, values passed to components are referred to as or rather than which are a feature of the DOM.","input":"By convention, values passed to components are referred to as or rather than which are a feature of the DOM. As with elements, can be replaced with the shorthand.","output":"<Widget foo={bar} answer={42} text=\"hello\" />"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: allow many attributes or properties to be passed to an element or component at once.","input":"allow many attributes or properties to be passed to an element or component at once. An element or component can have multiple spread attributes, interspersed with regular ones.","output":"<Widget {...things} />"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: A JavaScript expression can be included as text by surrounding it with curly braces.","input":"A JavaScript expression can be included as text by surrounding it with curly braces.","output":"{expression}"}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: You can use HTML comments inside components.","input":"You can use HTML comments inside components.","output":""}
{"instruction":"Create a Svelte 5 component demonstrating Basic markup: You can add a special comment starting with that will show up when hovering over the component name in other files.","input":"You can add a special comment starting with that will show up when hovering over the component name in other files.","output":"\n<script>\n  let { name } = $props();\n</script>\n\n<main>\n  <h1> Hello, {name} </h1>\n</main>"}
{"instruction":"Create a Svelte 5 component demonstrating {#if ...}: Content that is conditionally rendered can be wrapped in an if block.","input":"Content that is conditionally rendered can be wrapped in an if block.","output":"{#if answer === 42}\n  <p>what was the question?</p>\n{/if}"}
{"instruction":"Create a Svelte 5 component demonstrating {#if ...}: Additional conditions can be added with optionally ending in an clause.","input":"Additional conditions can be added with optionally ending in an clause.","output":"{#if porridge.temperature > 100}\n  <p>too hot!</p>\n{:else if 80 > porridge.temperature}\n  <p>too cold!</p>\n{:else}\n  <p>just right!</p>\n{/if}"}
{"instruction":"Create a Svelte 5 component demonstrating {#each ...}: Iterating over values can be done with an each block.","input":"Iterating over values can be done with an each block. The values in question can be arrays, array-like objects (i.e. anything with a property), or iterables like and — in other words, anything that can be used with .","output":"<h1>Shopping list</h1>\n<ul>\n  {#each items as item}\n    <li>{item.name} x {item.qty}</li>\n  {/each}\n</ul>"}
{"instruction":"Create a Svelte 5 component demonstrating {#each ...}: An each block can also specify an equivalent to the second argument in an callback:","input":"An each block can also specify an equivalent to the second argument in an callback:","output":"{#each items as item, i}\n  <li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}"}
{"instruction":"Create a Svelte 5 component demonstrating {#each ...}: If a expression is provided — which must uniquely identify each list item — Svelte will use it to diff the list when data changes, rather than adding or removing items at the end.","input":"If a expression is provided — which must uniquely identify each list item — Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.","output":"{#each items as item (item.id)}\n  <li>{item.name} x {item.qty}</li>\n{/each}\n\n{#each items as item, i (item.id)}\n  <li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}"}
{"instruction":"Create a Svelte 5 component demonstrating {#each ...}: You can freely use destructuring and rest patterns in each blocks.","input":"You can freely use destructuring and rest patterns in each blocks.","output":"{#each items as { id, name, qty }, i (id)}\n  <li>{i + 1}: {name} x {qty}</li>\n{/each}\n\n{#each objects as { id, ...rest }}\n  <li><span>{id}</span><MyComponent {...rest} /></li>\n{/each}\n\n{#each items as [id, ...rest]}\n  <li><span>{id}</span><MyComponent values={rest} /></li>\n{/each}"}
{"instruction":"Create a Svelte 5 component demonstrating {#each ...}: An each block can also have an clause, which is rendered if the list is empty.","input":"An each block can also have an clause, which is rendered if the list is empty.","output":"{#each todos as todo}\n  <p>{todo.text}</p>\n{:else}\n  <p>No tasks today!</p>\n{/each}"}
{"instruction":"Create a Svelte 5 component demonstrating {#key ...}: Key blocks destroy and recreate their contents when the value of an expression changes.","input":"Key blocks destroy and recreate their contents when the value of an expression changes. When used around components, this will cause them to be reinstantiated and reinitialised:","output":"{#key value}\n  <Component />\n{/key}"}
{"instruction":"Create a Svelte 5 component demonstrating {#await ...}: Await blocks allow you to branch on the three possible states of a — pending, fulfilled or rejected.","input":"Await blocks allow you to branch on the three possible states of a — pending, fulfilled or rejected.","output":"{#await promise}\n  <p>waiting for the promise to resolve...</p>\n{:then value}\n  <p>The value is {value}</p>\n{:catch error}\n  <p>Something went wrong: {error.message}</p>\n{/await}"}
{"instruction":"Create a Svelte 5 component demonstrating {#await ...}: The block can be omitted if you don't need to render anything when the promise rejects (or no error is possible).","input":"The block can be omitted if you don't need to render anything when the promise rejects (or no error is possible).","output":"{#await promise}\n  <p>waiting for the promise to resolve...</p>\n{:then value}\n  <p>The value is {value}</p>\n{/await}"}
{"instruction":"Create a Svelte 5 component demonstrating {#await ...}: If you don't care about the pending state, you can also omit the initial block.","input":"If you don't care about the pending state, you can also omit the initial block.","output":"{#await promise then value}\n  <p>The value is {value}</p>\n{/await}"}
{"instruction":"Create a Svelte 5 component demonstrating {#await ...}: Similarly, if you only want to show the error state, you can omit the block.","input":"Similarly, if you only want to show the error state, you can omit the block.","output":"{#await promise catch error}\n  <p>The error is {error}</p>\n{/await}"}
{"instruction":"Create a Svelte 5 component demonstrating {@render ...}: Alternatively, use an block with an clause to render fallback content:","input":"Alternatively, use an block with an clause to render fallback content:","output":"{#if children}\n  {@render children()}\n{:else}\n  <p>fallback content</p>\n{/if}"}
{"instruction":"Create a Svelte 5 component demonstrating {@html ...}: To inject raw HTML into your component, use the tag:","input":"To inject raw HTML into your component, use the tag:","output":"<article>\n  {@html content}\n</article>"}
{"instruction":"Create a Svelte 5 component demonstrating {@html ...}: Content rendered this way is 'invisible' to Svelte and as such will not receive — in other words, this will not work, and the and styles will be regarded as unused:","input":"Content rendered this way is 'invisible' to Svelte and as such will not receive — in other words, this will not work, and the and styles will be regarded as unused:","output":"<article>\n  {@html content}\n</article>\n\n<style>\n  article {\n    a { color: hotpink }\n    img { width: 100% }\n  }\n</style>"}
{"instruction":"Create a Svelte 5 component demonstrating {@html ...}: Instead, use the modifier to target everything inside the :","input":"Instead, use the modifier to target everything inside the :","output":"<style>\n  article:global{\n    a { color: hotpink }\n    img { width: 100% }\n  }\n</style>"}
{"instruction":"Create a Svelte 5 component demonstrating {@const ...}: The tag defines a local constant.","input":"The tag defines a local constant.","output":"{#each boxes as box}\n  {@const area = box.width * box.height}\n  {box.width} * {box.height} = {area}\n{/each}"}
{"instruction":"Create a Svelte 5 component demonstrating {@debug ...}: The tag offers an alternative to .","input":"The tag offers an alternative to . It logs the values of specific variables whenever they change, and pauses code execution if you have devtools open.","output":"<script>\nlet user = {\n  firstname: 'Ada',\n  lastname: 'Lovelace'\n};\n</script>\n\n{@debug user}\n\n<h1>Hello {user.firstname}!</h1>"}
{"instruction":"Create a Svelte 5 component demonstrating Scoped styles: Svelte components can include a element containing CSS that belongs to the component.","input":"Svelte components can include a element containing CSS that belongs to the component. This CSS is by default, meaning that styles will not apply to any elements on the page outside the component in question. This works by adding a class to affected elements, which is based on a hash of the component styles (e.g. ).","output":"<style>\np {\n  /* this will only affect <p> elements in this component */\n  color: burlywood;\n}\n</style>"}
{"instruction":"Create a Svelte 5 component demonstrating Global styles: To apply styles to a group of selectors globally, create a block:","input":"To apply styles to a group of selectors globally, create a block:","output":"<style>\n:global {\n  /* applies to every <div> in your application */\n  div { ... }\n\n  /* applies to every <p> in your application */\n  p { ... }\n}\n\n.a :global {\n  /* applies to every `.b .c .d` element, in any component,\n     that is inside an `.a` element in this component */\n  .b .c .d {...}\n}\n</style>"}
{"instruction":"Create a Svelte 5 component demonstrating Custom properties: Inside the component, we can read these custom properties (and provide fallback values) using :","input":"Inside the component, we can read these custom properties (and provide fallback values) using :","output":"<style>\n.track {\n  background: var(--track-color, #aaa);\n}\n\n.thumb {\n  background: var(--thumb-color, blue);\n}\n</style>"}
{"instruction":"Create a Svelte 5 component demonstrating Nested <style> elements: There can only be one top-level tag per component.","input":"There can only be one top-level tag per component. However, it is possible to have a tag nested inside other elements or logic blocks. In that case, the tag will be inserted as-is into the DOM; no scoping or processing will be done on the tag.","output":"<div>\n  <style>\n    /* this style tag will be inserted as-is */\n    div {\n      /* this will apply to all `<div>` elements in the DOM */\n      color: red;\n    }\n  </style>\n</div>"}
{"instruction":"Create a Svelte 5 component demonstrating <svelte:boundary>: If an function is provided, it will be called with the same two and arguments.","input":"If an function is provided, it will be called with the same two and arguments. This is useful for tracking the error with an error reporting service...","output":"<svelte:boundary onerror={(e) => report(e)}>\n  ...\n</svelte:boundary>"}
{"instruction":"Create a Svelte 5 component demonstrating <svelte:head>: This element makes it possible to insert elements into .","input":"This element makes it possible to insert elements into . During server-side rendering, content is exposed separately to the main content. As with and this element may only appear at the top level of your component and must never be inside a block or element.","output":"<svelte:head>\n  <title>Hello world!</title>\n  <meta name=\"description\" content=\"This is where the description goes for SEO\" />\n</svelte:head>"}
{"instruction":"Create a Svelte 5 component demonstrating <svelte:options>: The element provides a place to specify per-component compiler options, which are detailed in the .","input":"The element provides a place to specify per-component compiler options, which are detailed in the . The possible options are:","output":"<svelte:options customElement=\"my-custom-element\" />"}
{"instruction":"Create a Svelte 5 component demonstrating Context: This is particularly useful when is not directly aware of but instead renders it as part of a ( ):","input":"This is particularly useful when is not directly aware of but instead renders it as part of a ( ):","output":"<Parent>\n  <Child />\n</Parent>"}
{"instruction":"Create a Svelte 5 component demonstrating Reactive let/var declarations: Because Svelte's legacy mode reactivity is based on using array methods like .","input":"Because Svelte's legacy mode reactivity is based on using array methods like . and . won't automatically trigger updates. A subsequent assignment is required to 'tell' the compiler to update the UI:","output":"<script>\nlet numbers = [1, 2, 3, 4];\n\nfunction addNumber() {\n  // this method call does not trigger an update\n  numbers.push(numbers.length + 1);\n\n  // this assignment will update anything\n  // that depends on `numbers`\n  numbers = numbers;\n}\n</script>"}
{"instruction":"Create a Svelte 5 component demonstrating on:: Handlers can be declared inline with no performance penalty:","input":"Handlers can be declared inline with no performance penalty:","output":"<button on:click={() => (count += 1)}>\n  count: {count}\n</button>"}
{"instruction":"Create a Svelte 5 component demonstrating <svelte:component>: In runes mode, will re-render if the value of changes.","input":"In runes mode, will re-render if the value of changes. See the for an example. In legacy mode, it won't — we must use which destroys and recreates the component instance when the value of its expression changes:","output":"<svelte:component this={MyComponent} />"}
{"instruction":"Create a Svelte 5 component demonstrating <enhanced:img>: Use in your components by using rather than and referencing the image file with a path:","input":"Use in your components by using rather than and referencing the image file with a path:","output":"<enhanced:img src=\"./path/to/your/image.jpg\" alt=\"An alt text\" />"}
{"instruction":"Create a Svelte 5 component demonstrating <enhanced:img>: If you'd like to use a different and you can style the image with CSS.","input":"If you'd like to use a different and you can style the image with CSS. Because the preprocessor adds a and for you, if you'd like one of the dimensions to be automatically calculated then you will need to specify that:","output":"<style>\n  .hero-image img {\n    width: var(--size);\n    height: auto;\n  }\n</style>"}
{"instruction":"Create a Svelte 5 component demonstrating <enhanced:img>: If you have a large image, such as a hero image taking the width of the design, you should specify so that smaller versions are requested on smaller devices.","input":"If you have a large image, such as a hero image taking the width of the design, you should specify so that smaller versions are requested on smaller devices. E.g. if you have a 1280px image you may want to specify something like:","output":"<enhanced:img src=\"./image.png\" sizes=\"min(1280px, 100vw)\"/>"}
{"instruction":"Create a Svelte 5 component demonstrating <enhanced:img>: If is specified, will generate small images for smaller devices and populate the attribute.","input":"If is specified, will generate small images for smaller devices and populate the attribute. The smallest picture generated automatically will have a width of 540px. If you'd like smaller images or would otherwise like to specify custom widths, you can do that with the query parameter:","output":"<enhanced:img src=\"./image.png?w=1280;640;400\" sizes=\"(min-width:1920px) 1280px, (min-width:1080px) 640px, (min-width:768px) 400px\" />"}
{"instruction":"Create a Svelte 5 component demonstrating <enhanced:img>: By default, enhanced images will be transformed to more efficient formats.","input":"By default, enhanced images will be transformed to more efficient formats. However, you may wish to apply other transforms such as a blur, quality, flatten, or rotate operation. You can run per-image transforms by appending a query string:","output":"<enhanced:img src=\"./path/to/your/image.jpg?blur=15\" alt=\"An alt text\" />"}
{"instruction":"Create a Svelte 5 component demonstrating <title> and <meta>: Every page should have well-written and unique and elements inside a .","input":"Every page should have well-written and unique and elements inside a . Guidance on how to write descriptive titles and descriptions, along with other suggestions on making content understandable by search engines, can be found on Google's documentation.","output":""}
{"instruction":"Create a Svelte 5 component demonstrating Route announcements: In traditional server-rendered applications, every navigation (e.g.","input":"In traditional server-rendered applications, every navigation (e.g. clicking on an tag) triggers a full page reload. When this happens, screen readers and other assistive technology will read out the new page's title so that users understand that the page has changed. Since navigation between pages in SvelteKit happens without reloading the page (known as ), SvelteKit injects a onto the page that will read out the new page name after each navigation. This determines the page name to announce by inspecting the element. Because of this behavior, every page in your app should have a unique, descriptive title. In SvelteKit, you can do this by placing a element on each page:","output":"<!file: src/routes/+page.svelte>\n<svelte:head>\n  <title>Todo List</title>\n</svelte:head>"}
{"instruction":"Create a Svelte 5 component demonstrating Focus management: If you want to customize SvelteKit's focus management, you can use the hook:","input":"If you want to customize SvelteKit's focus management, you can use the hook:","output":""}
{"instruction":"Create a Svelte 5 component demonstrating +page.svelte: A component defines a page of your app.","input":"A component defines a page of your app. By default, pages are rendered both on the server () for the initial request and in the browser () for subsequent navigation.","output":"<!file: src/routes/+page.svelte>\n<h1>Hello and welcome to my site!</h1>\n<a href=\"/about\">About my site</a>"}
{"instruction":"Write Svelte 5 code for +page.svelte.","input":"","output":"<!file: src/routes/about/+page.svelte>\n<h1>About this site</h1>\n<p>TODO...</p>\n<a href=\"/\">Home</a>"}
{"instruction":"Create a Svelte 5 component demonstrating +layout.svelte: To create a layout that applies to every page, make a file called .","input":"To create a layout that applies to every page, make a file called . The default layout (the one that SvelteKit uses if you don't bring your own) looks like this...","output":"<script>\nlet { children } = $props();\n</script>\n\n{@render children()}"}
{"instruction":"Create a Svelte 5 component demonstrating +layout.svelte: ...but we can add whatever markup, styles and behaviour we want.","input":"...but we can add whatever markup, styles and behaviour we want. The only requirement is that the component includes a tag for the page content. For example, let's add a nav bar:","output":"<!file: src/routes/+layout.svelte>\n<script>\nlet { children } = $props();\n</script>\n\n<nav>\n  <a href=\"/\">Home</a>\n  <a href=\"/about\">About</a>\n  <a href=\"/settings\">Settings</a>\n</nav>\n\n{@render children()}"}
{"instruction":"Create a Svelte 5 component demonstrating Default actions: To invoke this action from the page, just add a — no JavaScript needed:","input":"To invoke this action from the page, just add a — no JavaScript needed:","output":"<!file: src/routes/login/+page.svelte>\n<form method=\"POST\">\n  <label>\n    Email\n    <input name=\"email\" type=\"email\">\n  </label>\n  <label>\n    Password\n    <input name=\"password\" type=\"password\">\n  </label>\n  <button>Log in</button>\n</form>"}
{"instruction":"Create a Svelte 5 component demonstrating Named actions: To invoke a named action, add a query parameter with the name prefixed by a character:","input":"To invoke a named action, add a query parameter with the name prefixed by a character:","output":"<!file: src/routes/login/+page.svelte>\n<form method=\"POST\" action=\"?/register\">\n  \n</form>"}
{"instruction":"Create a Svelte 5 component demonstrating Named actions: As well as the attribute, we can use the attribute on a button to the same form data to a different action than the parent :","input":"As well as the attribute, we can use the attribute on a button to the same form data to a different action than the parent :","output":"<form method=\"POST\"action=\"?/login\">\n  <label>\n    Email\n    <input name=\"email\" type=\"email\">\n  </label>\n  <label>\n    Password\n    <input name=\"password\" type=\"password\">\n  </label>\n  <button>Log in</button>\n  <button formaction=\"?/register\">Register</button>\n</form>"}
{"instruction":"Create a Svelte 5 component demonstrating +layout@: Like pages, layouts can break out of their parent layout hierarchy, using the same technique.","input":"Like pages, layouts can break out of their parent layout hierarchy, using the same technique. For example, a component would reset the hierarchy for all its child routes.","output":""}
{"instruction":"Create a Svelte 5 component demonstrating Disabling options: To disable any of these options inside an element where they have been enabled, use the value:","input":"To disable any of these options inside an element where they have been enabled, use the value:","output":"<div data-sveltekit-preload-data>\n  <a href=\"/a\">a</a>\n  <a href=\"/b\">b</a>\n  <a href=\"/c\">c</a>\n\n  <div data-sveltekit-preload-data=\"false\">\n    <a href=\"/d\">d</a>\n    <a href=\"/e\">e</a>\n    <a href=\"/f\">f</a>\n  </div>\n</div>"}
{"instruction":"Create a Svelte 5 component demonstrating Disabling options: To apply an attribute to an element conditionally, do this:","input":"To apply an attribute to an element conditionally, do this:","output":"<div data-sveltekit-preload-data={condition ? 'hover' : false}>\n  \n</div>"}